from sklearn.datasets import load_boston
import pandas as pd

# Load the dataset
boston = load_boston()

# Convert to DataFrame
data = pd.DataFrame(boston.data, columns=boston.feature_names)
data['PRICE'] = boston.target

# Display the first few rows of the dataset
data.head()
# Check for missing values
data.isnull().sum()

# Standardize the features
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
features = data.drop('PRICE', axis=1)
scaled_features = scaler.fit_transform(features)

# Convert scaled features back to a DataFrame
scaled_features = pd.DataFrame(scaled_features, columns=features.columns)
scaled_features['PRICE'] = data['PRICE']

# Display the first few rows of the scaled features
scaled_features.head()
from sklearn.model_selection import train_test_split

# Define the target variable and features
X = scaled_features.drop('PRICE', axis=1)
y = scaled_features['PRICE']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check the shape of the splits
X_train.shape, X_test.shape, y_train.shape, y_test.shape
from sklearn.linear_model import LinearRegression

# Initialize the model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate the Mean Squared Error (MSE) and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

mse, r2
